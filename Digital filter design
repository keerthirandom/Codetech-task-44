module fir_filter #(
    parameter N = 4,                 // Number of taps
    parameter DATA_WIDTH = 16,       // Bit width of input and output
    parameter COEFF_WIDTH = 16       // Bit width of coefficients
)(
    input clk,
    input rst,
    input signed [DATA_WIDTH-1:0] x_in,
    output reg signed [DATA_WIDTH-1:0] y_out
);

    // Example coefficients (change as needed)
    // For a simple moving average, all = 1/N
    localparam signed [COEFF_WIDTH-1:0] coeffs [0:N-1] = {
        16'sd8192, // 0.25 * 32768
        16'sd8192, // 0.25 * 32768
        16'sd8192, // 0.25 * 32768
        16'sd8192  // 0.25 * 32768
    };

    reg signed [DATA_WIDTH-1:0] shift_reg [0:N-1];
    integer i;
    wire signed [DATA_WIDTH+COEFF_WIDTH-1:0] products [0:N-1];

    // Shift register and multiply
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            for (i = 0; i < N; i = i + 1)
                shift_reg[i] <= 0;
        end else begin
            shift_reg[0] <= x_in;
            for (i = 1; i < N; i = i + 1)
                shift_reg[i] <= shift_reg[i-1];
        end
    end

    // Multiply
    generate
        genvar j;
        for (j = 0; j < N; j = j + 1) begin : multiply
            assign products[j] = shift_reg[j] * coeffs[j];
        end
    endgenerate

    // Accumulate
    reg signed [DATA_WIDTH+COEFF_WIDTH+3:0] acc;
    always @(*) begin
        acc = 0;
        for (i = 0; i < N; i = i + 1)
            acc = acc + products[i];
    end

    // Output (truncate to DATA_WIDTH)
    always @(posedge clk or posedge rst) begin
        if (rst)
            y_out <= 0;
        else
            y_out <= acc >>> 15; // Adjust shift for Q1.15 fixed point
    end

endmodule
`timescale 1ns/1ps

module fir_filter_tb();

    parameter N = 4;
    parameter DW = 16;
    reg clk, rst;
    reg signed [DW-1:0] x_in;
    wire signed [DW-1:0] y_out;

    fir_filter #(.N(N), .DATA_WIDTH(DW)) uut (
        .clk(clk),
        .rst(rst),
        .x_in(x_in),
        .y_out(y_out)
    );

    // Input sequence: Step function
    integer i;
    initial begin
        $dumpfile("fir_filter_tb.vcd");
        $dumpvars(0, fir_filter_tb);

        clk = 0; rst = 1; x_in = 0;
        #10 rst = 0;
        for (i = 0; i < 20; i = i + 1) begin
            #10;
            if (i < 10)
                x_in = 16'sd32767;  // Max positive value (step input)
            else
                x_in = 0;
            $display("Time=%0d ns, x_in=%d, y_out=%d", $time, x_in, y_out);
        end
        #100 $finish;
    end

    always #5 clk = ~clk;
endmodule
